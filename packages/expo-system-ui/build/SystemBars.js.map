{"version":3,"file":"SystemBars.js","sourceRoot":"","sources":["../src/SystemBars.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ReactNode } from 'react';\nimport {\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n  Platform,\n  StatusBar,\n} from 'react-native';\n\nimport ExpoSystemUI, { SystemBarsConfig } from './ExpoSystemUI';\n\n// @ts-expect-error\nconst customGlobal = global as {\n  _appearanceSubscription?: NativeEventSubscription;\n};\n\nexport type SystemBarStyle = 'auto' | 'light' | 'dark';\n\nexport type SystemBarsProps = {\n  hidden?:\n    | boolean\n    | {\n        statusBar?: boolean;\n        navigationBar?: boolean;\n      };\n  style?:\n    | SystemBarStyle\n    | {\n        statusBar?: SystemBarStyle;\n        navigationBar?: SystemBarStyle;\n      };\n};\n\nexport type SystemBarsStackEntry = {\n  statusBarHidden: boolean | undefined;\n  statusBarStyle: SystemBarStyle | undefined;\n  navigationBarHidden: boolean | undefined;\n  navigationBarStyle: SystemBarStyle | undefined;\n};\n\n/**\n * Merges the prop stack.\n */\nfunction mergePropsStack(propsStack: SystemBarsStackEntry[]): SystemBarsStackEntry | null {\n  const mergedEntry = propsStack.reduce<SystemBarsStackEntry>(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {\n      statusBarHidden: undefined,\n      statusBarStyle: undefined,\n      navigationBarHidden: undefined,\n      navigationBarStyle: undefined,\n    }\n  );\n\n  if (\n    mergedEntry.statusBarHidden == null &&\n    mergedEntry.statusBarStyle == null &&\n    mergedEntry.navigationBarHidden == null &&\n    mergedEntry.navigationBarStyle == null\n  ) {\n    return null;\n  } else {\n    return mergedEntry;\n  }\n}\n\n/**\n * Returns an object to insert in the props stack from the props.\n */\nfunction createStackEntry({ hidden, style }: SystemBarsProps): SystemBarsStackEntry {\n  return {\n    statusBarHidden: typeof hidden === 'boolean' ? hidden : hidden?.statusBar,\n    statusBarStyle: typeof style === 'string' ? style : style?.statusBar,\n    navigationBarHidden: typeof hidden === 'boolean' ? hidden : hidden?.navigationBar,\n    navigationBarStyle: typeof style === 'string' ? style : style?.navigationBar,\n  };\n}\n\nexport class SystemBars extends Component<SystemBarsProps> {\n  private static _propsStack: SystemBarsStackEntry[] = [];\n\n  // Timer for updating the native module values at the end of the frame.\n  private static _updateImmediate: number | null = null;\n\n  // The current merged values from the props stack.\n  private static _currentValues: SystemBarsStackEntry | null = null;\n\n  /**\n   * Push a SystemBars entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the SystemBars props to use in the stack entry.\n   */\n  static pushStackEntry(props: SystemBarsProps): SystemBarsStackEntry {\n    const entry = createStackEntry(props);\n    SystemBars._propsStack.push(entry);\n    SystemBars._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a SystemBars entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: SystemBarsStackEntry): void {\n    const index = SystemBars._propsStack.indexOf(entry);\n    if (index !== -1) {\n      SystemBars._propsStack.splice(index, 1);\n    }\n    SystemBars._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing SystemBars stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the SystemBars props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(\n    entry: SystemBarsStackEntry,\n    props: SystemBarsProps\n  ): SystemBarsStackEntry {\n    const newEntry = createStackEntry(props);\n    const index = SystemBars._propsStack.indexOf(entry);\n    if (index !== -1) {\n      SystemBars._propsStack[index] = newEntry;\n    }\n    SystemBars._updatePropsStack();\n    return newEntry;\n  }\n\n  private _stackEntry: SystemBarsStackEntry | null = null;\n\n  override componentDidMount() {\n    // Every time a SystemBars component is mounted, we push it's prop to a stack\n    // and always update the native system bars with the props from the top of then\n    // stack. This allows having multiple SystemBars components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = SystemBars.pushStackEntry(this.props);\n  }\n\n  override componentDidUpdate() {\n    if (this._stackEntry) {\n      this._stackEntry = SystemBars.replaceStackEntry(this._stackEntry, this.props);\n    }\n  }\n\n  override componentWillUnmount() {\n    // When a SystemBars is unmounted, remove itself from the stack and update\n    // the native bars with the next props.\n    if (this._stackEntry) {\n      SystemBars.popStackEntry(this._stackEntry);\n    }\n  }\n\n  private static _applyStackEntry(entry: SystemBarsStackEntry, colorScheme: ColorSchemeName) {\n    const { statusBarHidden, navigationBarHidden } = entry;\n    const autoBarStyle = colorScheme === 'light' ? 'dark' : 'light';\n\n    const statusBarStyle: SystemBarsConfig['statusBarStyle'] =\n      entry.statusBarStyle === 'auto' ? autoBarStyle : entry.statusBarStyle;\n    const navigationBarStyle: SystemBarsConfig['navigationBarStyle'] =\n      entry.navigationBarStyle === 'auto' ? autoBarStyle : entry.navigationBarStyle;\n\n    if (Platform.OS === 'ios') {\n      ExpoSystemUI.setSystemBarsConfigAsync({\n        statusBarStyle,\n        navigationBarStyle,\n        statusBarHidden,\n        navigationBarHidden,\n      });\n    } else {\n      // Emulate android behavior with react-native StatusBar\n      if (statusBarStyle != null) {\n        StatusBar.setBarStyle(`${statusBarStyle}-content`, true);\n      }\n      if (statusBarHidden != null) {\n        StatusBar.setHidden(statusBarHidden, 'fade'); // 'slide' doesn't work in this context\n      }\n    }\n  }\n\n  /**\n   * Updates the native system bars with the props from the stack.\n   */\n  private static _updatePropsStack() {\n    // Send the update to the native module only once at the end of the frame.\n    if (SystemBars._updateImmediate != null) {\n      clearImmediate(SystemBars._updateImmediate);\n    }\n\n    SystemBars._updateImmediate = setImmediate(() => {\n      const oldProps = SystemBars._currentValues;\n      const mergedProps = mergePropsStack(SystemBars._propsStack);\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (mergedProps != null) {\n        // Update only if the configuration has changed.\n        if (\n          oldProps?.statusBarHidden !== mergedProps.statusBarHidden ||\n          oldProps?.statusBarStyle !== mergedProps.statusBarStyle ||\n          oldProps?.navigationBarHidden !== mergedProps.navigationBarHidden ||\n          oldProps?.navigationBarStyle !== mergedProps.navigationBarStyle\n        ) {\n          SystemBars._applyStackEntry(\n            mergedProps,\n            mergedProps.statusBarStyle === 'auto' || mergedProps.navigationBarStyle === 'auto'\n              ? Appearance.getColorScheme()\n              : null\n          );\n        }\n\n        // Update the current props values.\n        SystemBars._currentValues = mergedProps;\n      } else {\n        // Reset current props when the stack is empty.\n        SystemBars._currentValues = null;\n      }\n    });\n  }\n\n  override render(): ReactNode {\n    return null;\n  }\n\n  private static _onAppearanceChange({ colorScheme }: Appearance.AppearancePreferences) {\n    const currentValues = SystemBars._currentValues;\n\n    if (currentValues?.statusBarStyle === 'auto' || currentValues?.navigationBarStyle === 'auto') {\n      SystemBars._applyStackEntry(currentValues, colorScheme);\n    }\n  }\n\n  private static _appearanceSubscription = (() => {\n    const subscription =\n      customGlobal._appearanceSubscription ??\n      Appearance.addChangeListener(SystemBars._onAppearanceChange);\n\n    // Workaround to subscribe once with fast-refresh\n    if (__DEV__) {\n      customGlobal._appearanceSubscription = subscription;\n    }\n\n    return subscription;\n  })();\n}\n"]}